{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport React, { forwardRef } from 'react';\nimport { useMantineDefaultProps } from '@mantine/styles';\nimport { useGridContext } from '../Grid.context.js';\nimport useStyles from './Col.styles.js';\nimport { Box } from '../../Box/Box.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) {\n    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n  for (var prop in source) {\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  }\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return target;\n};\nvar defaultProps = {\n  offset: 0,\n  offsetXs: 0,\n  offsetSm: 0,\n  offsetMd: 0,\n  offsetLg: 0,\n  offsetXl: 0\n};\nfunction isValidSpan(span) {\n  return typeof span === \"number\" && span > 0 && span % 1 === 0;\n}\nvar Col = forwardRef(function (props, ref) {\n  var _a = useMantineDefaultProps(\"Col\", defaultProps, props),\n    children = _a.children,\n    span = _a.span,\n    offset = _a.offset,\n    offsetXs = _a.offsetXs,\n    offsetSm = _a.offsetSm,\n    offsetMd = _a.offsetMd,\n    offsetLg = _a.offsetLg,\n    offsetXl = _a.offsetXl,\n    xs = _a.xs,\n    sm = _a.sm,\n    md = _a.md,\n    lg = _a.lg,\n    xl = _a.xl,\n    className = _a.className,\n    classNames = _a.classNames,\n    styles = _a.styles,\n    id = _a.id,\n    others = __objRest(_a, [\"children\", \"span\", \"offset\", \"offsetXs\", \"offsetSm\", \"offsetMd\", \"offsetLg\", \"offsetXl\", \"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"className\", \"classNames\", \"styles\", \"id\"]);\n  var _useGridContext = useGridContext(\"Grid.Col\"),\n    columns = _useGridContext.columns,\n    gutter = _useGridContext.gutter,\n    grow = _useGridContext.grow;\n  var colSpan = span || columns;\n  var _useStyles = useStyles({\n      gutter: gutter,\n      offset: offset,\n      offsetXs: offsetXs,\n      offsetSm: offsetSm,\n      offsetMd: offsetMd,\n      offsetLg: offsetLg,\n      offsetXl: offsetXl,\n      xs: xs,\n      sm: sm,\n      md: md,\n      lg: lg,\n      xl: xl,\n      grow: grow,\n      columns: columns,\n      span: colSpan\n    }, {\n      classNames: classNames,\n      styles: styles,\n      name: \"Col\"\n    }),\n    classes = _useStyles.classes,\n    cx = _useStyles.cx;\n  if (!isValidSpan(colSpan) || colSpan > columns) {\n    return null;\n  }\n  return /* @__PURE__ */React.createElement(Box, __spreadValues({\n    className: cx(classes.root, className),\n    ref: ref\n  }, others), children);\n});\nCol.displayName = \"@mantine/core/Col\";\nexport { Col };","map":null,"metadata":{},"sourceType":"module"}