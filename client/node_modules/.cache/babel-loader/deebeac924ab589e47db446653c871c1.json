{"ast":null,"code":"import _slicedToArray from \"D:\\\\socialmedia\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useRef, useState, useEffect } from 'react';\nfunction useUncontrolled(_ref) {\n  var value = _ref.value,\n    defaultValue = _ref.defaultValue,\n    finalValue = _ref.finalValue,\n    rule = _ref.rule,\n    onChange = _ref.onChange,\n    onValueUpdate = _ref.onValueUpdate;\n  var shouldBeControlled = rule(value);\n  var modeRef = useRef(\"initial\");\n  var initialValue = rule(defaultValue) ? defaultValue : finalValue;\n  var _useState = useState(initialValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    uncontrolledValue = _useState2[0],\n    setUncontrolledValue = _useState2[1];\n  var effectiveValue = shouldBeControlled ? value : uncontrolledValue;\n  if (!shouldBeControlled && modeRef.current === \"controlled\") {\n    effectiveValue = finalValue;\n  }\n  modeRef.current = shouldBeControlled ? \"controlled\" : \"uncontrolled\";\n  var mode = modeRef.current;\n  var handleChange = function handleChange(nextValue) {\n    typeof onChange === \"function\" && onChange(nextValue);\n    if (mode === \"uncontrolled\") {\n      setUncontrolledValue(nextValue);\n    }\n  };\n  useEffect(function () {\n    if (mode === \"uncontrolled\") {\n      setUncontrolledValue(effectiveValue);\n    }\n    typeof onValueUpdate === \"function\" && onValueUpdate(effectiveValue);\n  }, [mode, effectiveValue]);\n  return [effectiveValue, handleChange, modeRef.current];\n}\nexport { useUncontrolled };","map":null,"metadata":{},"sourceType":"module"}