{"ast":null,"code":"const TABBABLE_NODES = /input|select|textarea|button|object/;\nconst FOCUS_SELECTOR = \"a, input, select, textarea, button, object, [tabindex]\";\nfunction hidden(element) {\n  if (process.env.NODE_ENV === \"test\") {\n    return false;\n  }\n  return element.style.display === \"none\";\n}\nfunction visible(element) {\n  let parentElement = element;\n  while (parentElement) {\n    if (parentElement === document.body) {\n      break;\n    }\n    if (hidden(parentElement)) {\n      return false;\n    }\n    parentElement = parentElement.parentNode;\n  }\n  return true;\n}\nfunction getElementTabIndex(element) {\n  let tabIndex = element.getAttribute(\"tabindex\");\n  if (tabIndex === null) {\n    tabIndex = void 0;\n  }\n  return parseInt(tabIndex, 10);\n}\nfunction focusable(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));\n  const res = TABBABLE_NODES.test(nodeName) && !element.disabled || (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);\n  return res && visible(element);\n}\nfunction tabbable(element) {\n  const tabIndex = getElementTabIndex(element);\n  const isTabIndexNaN = Number.isNaN(tabIndex);\n  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);\n}\nfunction findTabbableDescendants(element) {\n  return Array.from(element.querySelectorAll(FOCUS_SELECTOR)).filter(tabbable);\n}\nexport { FOCUS_SELECTOR, findTabbableDescendants, focusable, tabbable };","map":{"version":3,"mappings":"AAAA,MAAMA,cAAc,GAAG,qCAAqC;AAChD,MAACC,cAAc,GAAG;AAC9B,SAASC,MAAM,CAACC,OAAO,EAAE;EACvB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;IACnC,OAAO,KAAK;EAChB;EACE,OAAOH,OAAO,CAACI,KAAK,CAACC,OAAO,KAAK,MAAM;AACzC;AACA,SAASC,OAAO,CAACN,OAAO,EAAE;EACxB,IAAIO,aAAa,GAAGP,OAAO;EAC3B,OAAOO,aAAa,EAAE;IACpB,IAAIA,aAAa,KAAKC,QAAQ,CAACC,IAAI,EAAE;MACnC;IACN;IACI,IAAIV,MAAM,CAACQ,aAAa,CAAC,EAAE;MACzB,OAAO,KAAK;IAClB;IACIA,aAAa,GAAGA,aAAa,CAACG,UAAU;EAC5C;EACE,OAAO,IAAI;AACb;AACA,SAASC,kBAAkB,CAACX,OAAO,EAAE;EACnC,IAAIY,QAAQ,GAAGZ,OAAO,CAACa,YAAY,CAAC,UAAU,CAAC;EAC/C,IAAID,QAAQ,KAAK,IAAI,EAAE;IACrBA,QAAQ,GAAG,KAAK,CAAC;EACrB;EACE,OAAOE,QAAQ,CAACF,QAAQ,EAAE,EAAE,CAAC;AAC/B;AACO,SAASG,SAAS,CAACf,OAAO,EAAE;EACjC,MAAMgB,QAAQ,GAAGhB,OAAO,CAACgB,QAAQ,CAACC,WAAW,EAAE;EAC/C,MAAMC,gBAAgB,GAAG,CAACC,MAAM,CAACC,KAAK,CAACT,kBAAkB,CAACX,OAAO,CAAC,CAAC;EACnE,MAAMqB,GAAG,GAAGxB,cAAc,CAACyB,IAAI,CAACN,QAAQ,CAAC,IAAI,CAAChB,OAAO,CAACuB,QAAQ,KAAKvB,OAAO,YAAYwB,iBAAiB,GAAGxB,OAAO,CAACyB,IAAI,IAAIP,gBAAgB,GAAGA,gBAAgB,CAAC;EAC9J,OAAOG,GAAG,IAAIf,OAAO,CAACN,OAAO,CAAC;AAChC;AACO,SAAS0B,QAAQ,CAAC1B,OAAO,EAAE;EAChC,MAAMY,QAAQ,GAAGD,kBAAkB,CAACX,OAAO,CAAC;EAC5C,MAAM2B,aAAa,GAAGR,MAAM,CAACC,KAAK,CAACR,QAAQ,CAAC;EAC5C,OAAO,CAACe,aAAa,IAAIf,QAAQ,IAAI,CAAC,KAAKG,SAAS,CAACf,OAAO,CAAC;AAC/D;AACO,SAAS4B,uBAAuB,CAAC5B,OAAO,EAAE;EAC/C,OAAO6B,KAAK,CAACC,IAAI,CAAC9B,OAAO,CAAC+B,gBAAgB,CAACjC,cAAc,CAAC,CAAC,CAACkC,MAAM,CAACN,QAAQ,CAAC;AAC9E","names":["TABBABLE_NODES","FOCUS_SELECTOR","hidden","element","process","env","NODE_ENV","style","display","visible","parentElement","document","body","parentNode","getElementTabIndex","tabIndex","getAttribute","parseInt","focusable","nodeName","toLowerCase","isTabIndexNotNaN","Number","isNaN","res","test","disabled","HTMLAnchorElement","href","tabbable","isTabIndexNaN","findTabbableDescendants","Array","from","querySelectorAll","filter"],"sources":["D:\\socialmedia\\SocialMedia-Starter\\node_modules\\@mantine\\hooks\\src\\use-focus-trap\\tabbable.ts"],"sourcesContent":["const TABBABLE_NODES = /input|select|textarea|button|object/;\nexport const FOCUS_SELECTOR = 'a, input, select, textarea, button, object, [tabindex]';\n\nfunction hidden(element: HTMLElement) {\n  if (process.env.NODE_ENV === 'test') {\n    return false;\n  }\n\n  return element.style.display === 'none';\n}\n\nfunction visible(element: HTMLElement) {\n  let parentElement: HTMLElement = element;\n  while (parentElement) {\n    if (parentElement === document.body) {\n      break;\n    }\n\n    if (hidden(parentElement)) {\n      return false;\n    }\n\n    parentElement = parentElement.parentNode as HTMLElement;\n  }\n\n  return true;\n}\n\nfunction getElementTabIndex(element: HTMLElement) {\n  let tabIndex = element.getAttribute('tabindex');\n  if (tabIndex === null) {\n    tabIndex = undefined;\n  }\n  return parseInt(tabIndex, 10);\n}\n\nexport function focusable(element: HTMLElement) {\n  const nodeName = element.nodeName.toLowerCase();\n  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));\n  const res =\n    // @ts-ignore\n    (TABBABLE_NODES.test(nodeName) && !element.disabled) ||\n    (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);\n\n  return res && visible(element);\n}\n\nexport function tabbable(element: HTMLElement) {\n  const tabIndex = getElementTabIndex(element);\n  const isTabIndexNaN = Number.isNaN(tabIndex);\n  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);\n}\n\nexport function findTabbableDescendants(element: HTMLElement): HTMLElement[] {\n  return Array.from(element.querySelectorAll<HTMLElement>(FOCUS_SELECTOR)).filter(tabbable);\n}\n"]},"metadata":{},"sourceType":"module"}